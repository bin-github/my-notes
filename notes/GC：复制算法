#### 复制算法
##### 1、概述：
> 1、GC 复制算法是利用 From 空间进行分配的。当 From 空间被完全占满时，GC 会将活动对象全部复制到 To 空间。当复制完成后，该算法会把 From 空间和 To 空间互换，GC 也就结束了。From 空间和 To 空间大小必须一致。这是为了保证能把 From 空间中的所有活动对象都收纳到 To 空间里。
##### 2、分配过程：
> 1、new_obj()函数：
>> 1、当form块中的剩余大小大于要分配对象的小大时，可分配成功，   
>> 2、当from块中的剩余大小小于要分配对象的大小时，可以进行一次copy-GC,然后再在交换之后的from块中检查对象大小和剩余块大小，如果有足够的空间，则直接分配，否则返回失败。

> 2、复制过程：在复制时，先从根出发，复制第一个引用对象及其子对象，再复制第二个从根出发的对象及其子对象，依次类推，**对已复制过的对象使用标记位进行标记1**，使用**深度优先**的算法复制完所有活动对象最后清除from块中的内存，并将其转换为to块，已存有对象的块转换为from块。

> 3、优点：  
>> 1、优秀的吞吐量：和标记-清除式算法相比，复制算法只会复制活动对象，复制花费的时间和活动对象数成正比  
>> 2、可实现高速分配：和标记-清除算法相比，复制算法是整块分配，只from块的大小不小于对象的大小就可以分配，而别的算法都使用了空闲链表，需要遍历空闲链表，找到合适的块   
>> 3、不会发生碎片化：复制算法是整块分配和回收的，不会存在内存碎片；    
>> 4、与缓存兼容：在GC复制算法中有引用关系的对象会被安排在堆里离彼此较近的位置，这种情况有一个优点，那就是mutator执行速度极快。近来很多CPU都通过缓存来高速读取位置较近的对象。

> 4、缺点：
>> 1、堆使用效率低下：将堆分成两块等大的，实质利用的只有堆的一半；   
>> 2、不兼容保守式GC算法：需要移动对象，与保守的gc算法不移动对象的策略有违，不过可以与保守算法相结合使用；   
>> 3、递归调用函数：复制某个对象时要递归复制它的子对象。因此在每次进行复制的
时候都要调用函数，由此带来的额外负担不容忽视，有可能造成栈溢出，
##### 4、Cheney算法：
> 1、概述：在基本复制算法的基础上，修改了两点：  
>> 1、判断已被复制的对象不是用标记位，而是使用是否有指针指向to块，   
>> 2、使用广度优先算法进行对from块中的对象进行复制，   
>> 3、复制过程和基本复制算法基本相同，不同点就是以上说的两点，在复制对象时的方法不同，

> 2、优点：
>> 1、基于以上两点的不同，Cheney复制算法能够有效的减少栈的使用；    
>> 2、在其复制时有两个引用，第一个free是在to块分配复制对象的，scan是扫描仪复制到to块中的对象是否有一级子对象，这样形成了广度优先搜索算法，而且形成了一个隐形的队列。

> 3、缺点：由于Cheney算法复制时使用的是广度优先算法，相互有引用的对象并没有放在相邻的内存位置，这样与缓存的兼容没有基本复制算法那般好了，但是也比一般的标记-清除和引用计数好一些。

##### 5、近似深度优先搜索方法
> 1、概述：Cheney算法是将基本复制算法的深度优先改为广度优先，避免子对象的递归调用时的栈空间消耗，单页使得有联系的对象可能没有分配到相邻的位置，近似深度优先搜索法就是在Cheney算法的基础上进行改进。

> 2、该算法将堆分成多个数组，从第一个对象开始，当一个数组的空间没有满时，使用深度优先算法，将对象及其直接子对象尽量分配在一个数组中，当数组满时，再使用广度优先的算法处理该对象的平级对象。

##### 6、多空间复制算法:
> 1、概述：将堆 N 等分，对其中2块空间执行GC复制算法，对剩下的（N-2）块空间执行 GC 标记 - 清除算法，也就是把这 2 种算法组合起来使用。

> 2、执行过程：
>> 1、首次将堆的第一块作为to块，接着的一块作为from块，执行gc之后，from块变成to块，再讲紧接着的后面一块作为from块，这样一直循环到to块为最后一块时，再重新将第一块置为to块，如此循环。    
>> 2、在各个块进行gc时，如果from块中的子对象在别的非from块中，将对搞对象进行标记，使用标记-清除法处理该对象，如果子对象在from块中，则进行复制法处理该对象。一句话：只有在from块中的对象才会使用复制法，不在from块中的对象使用标记—清除法。

> 3、优缺点：
>> 1、该方法会将堆的使用率提高；

>> 2、改方法中只有to和from块使用复制法，别的都使用标记-清除法，这样使得标记-清除法的一些问题将会出现，如：内存碎片、对空闲链表的遍历（耗时）等。
